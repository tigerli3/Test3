import sys
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5 import uic
import shutil
from pytimekr import pytimekr
from rPskaMacController import *

# UI 파일 위치
form_class = uic.loadUiType('Macro.ui')[0]


def setCourt(self, start):
    if self.cb_StartCourt.count() > 0:
        self.cb_EndCourt.clear()

        # self.cb_EndCourt.addItem(str(start))t
        for i in range(start, 19):
            self.cb_EndCourt.addItem(str(i))
    else:
        # self.cb_StartCourt.addItem(str(start))
        # self.cb_EndCourt.addItem(str(start))
        for i in range(start, 19):
            self.cb_StartCourt.addItem(str(i))
            self.cb_EndCourt.addItem(str(i))


def setReservationTime(self, usedDate, week, holidays):
    self.cb_StartTime.clear()
    self.cb_EndTime.clear()

    # 빨간날
    if (usedDate in holidays) or (week == 6 or week == 7):
        self.isWeek = True
        for i in range(7):
            iStartTime = (i * 3) + 9 - i

            sStartTime = str(iStartTime)

            if iStartTime < 10:
                sStartTime = '0' + sStartTime

            self.cb_StartTime.addItem(sStartTime + ":00")
    else:
        self.isWeek = False
        for i in range(13):
            iStartTime = 9 + i

            sStartTime = str(iStartTime)

            if iStartTime < 10:
                sStartTime = '0' + sStartTime

            self.cb_StartTime.addItem(sStartTime + ":00")

def setReservationEndTime(ui, startTimeIndeex, usedDate, week, holidays):
    ui.clear()

    # 빨간날
    if (usedDate in holidays) or (week == 6 or week == 7):
        for i in range(startTimeIndeex, 7):
            iEndtime = (i * 3) + 11 - i
            sEndTime = str(iEndtime)

            if iEndtime == 23:
                sEndTime = str(iEndtime - 1)

            ui.addItem(sEndTime + ":00")
    else:
        for i in range(startTimeIndeex, 13):
            iEndtime = 10 + i
            sEndTime = str(iEndtime)

            if iEndtime == 23:
                sEndTime = str(iEndtime - 1)

            ui.addItem(sEndTime + ":00")

def validation(self, **kwargs):
    valRes = True

    if kwargs["teamName"] == '':
        self.setLog('대표자 미 입력')
        valRes = False

    if kwargs["userCount"] == '':
        self.setLog('참가 인원 미 입력')
        valRes = False

    if kwargs["purpose"] == '':
        self.setLog('이용 목적 미 입력')
        valRes = False

    if kwargs["usedDate"] is None:
        self.setLog('이용 날짜 미 입력')
        valRes = False

    if kwargs["startCourt"] == '':
        self.setLog('시작 코트 미 입력')
        valRes = False

    if kwargs["endCourt"] == '':
        self.setLog('종료 코트 미 입력')
        valRes = False

    if kwargs["startTime"] == '':
        self.setLog('시작 시간 미 입력')
        valRes = False

    if kwargs["endTime"] == '':
        self.setLog('종료 시간 미 입력')
        valRes = False

        if not valRes:
            QMessageBox.question(self, 'Warning', '유효성 검증 오류!\nLog를 확인 하세요.', QMessageBox.Ok)
        else:
            iStartTime = int(kwargs["startTime"].split(':')[0])
            iEndTime = int(kwargs["endTime"].split(':')[0])

            if iEndTime - iStartTime == 1:
                QMessageBox.question(self, 'Warning', '해당 시설을 예약하기 위한 최소 시간이 미달되었습니다.', QMessageBox.Ok)
                self.setLog('해당 시설을 예약 하기 위한 최소 시간이 미달되었습니다.')
                valRes = False
            elif iEndTime - iStartTime > 4:
                QMessageBox.question(self, 'Warning', '해당 시설을 예약하기 위한 최대 시간을 초과하였습니다.', QMessageBox.Ok)
                self.setLog('해당 시설을 예약 하기 위한 최대 시간을 초과하였습니다.')
                valRes = False

    return valRes

class Worker(QThread):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent  # self.parent를 사용하여 WindowClass 위젯을 제어할 수 있다.

    def run(self):
        if self.parent.rm is None:
            self.parent.rm = RunMacro(self.parent)

        try:
            self.parent.rm.moveToLoginPage()
        except Exception as e:
            self.parent.rm.quitDriver()
            self.parent.rm = RunMacro(self.parent)
            self.parent.rm.moveToLoginPage()

class StartMacro(QThread):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        # self.parent.rm = RunMacro(self.parent)

    def run(self):
        self.parent.rm.startMacro()

class StopMacro(QThread):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent

    def run(self):
        self.parent.rm.stopMacro()


class Worker2(QThread):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent  # self.parent를 사용하여 WindowClass 위젯을 제어할 수 있다.

    def run(self):
        if self.parent.rm is not None:
            self.parent.rm.quitDriver()
            print(self.parent.tb_Log.toPlainText())


class WindowClass(QMainWindow, form_class):
    def __init__(self):
        super().__init__()

        self.usedDate = None
        self.rm = None
        self.wk = Worker(self)
        self.isWeek = False

        fHolidays = pytimekr.holidays()  # holidays메소드는 리스트 형태로 관련값 반환
        holidays = []
        for fHoliday in fHolidays:
            holidays.append(fHoliday.strftime('%Y%m%d'))

        holidays.append('20220912')
        self.holidays = holidays

        self.setWindowIcon(QIcon('logo.png'))

        self.setupUi(self)

        self.qPixmapVar = QPixmap()
        self.qPixmapVar.load("courtView.jpg")
        self.lbl_Img.setPixmap(self.qPixmapVar)

        self.le_Team.setText('1')
        self.le_Purpose.setText('게임')

        # 현재 시간 표시
        self.timer = QTimer(self)
        self.timer.setInterval(100)
        self.timer.timeout.connect(self.timeout)
        self.timer.start()

        self.cal_UsedDate.showToday()

        # 공휴일 표시
        fm = QTextCharFormat()
        fm.setForeground(Qt.red)
        fm.setBackground(Qt.yellow)

        # 날짜 선택
        self.cal_UsedDate.setGridVisible(True)
        for holiday in self.holidays:
            dHoliday = QDate.fromString(str(holiday), "yyyyMMdd")
            self.cal_UsedDate.setDateTextFormat(dHoliday, fm)

        self.cal_UsedDate.clicked.connect(self.calendarClicked)

        # 참가 인원 ComboBox
        for i in range(1, 5):
            self.cb_UsersCount.addItem(str(i))

        # 시작/종료 코트
        setCourt(self, 1)

        self.cb_StartCourt.currentIndexChanged.connect(self.changeEndCourtComboBoxAction)
        self.cb_StartTime.currentIndexChanged.connect(self.changeEndTimeComboBoxAction)

        # 버튼
        # 로그인 페이지 열기
        self.btn_OpenPage.clicked.connect(self.openPageAction)

        # 캐시 삭제
        self.btn_ClearCache.clicked.connect(self.clearCacheAction)

        # 시작
        self.btn_Start.clicked.connect(self.startMacroAction)

        # 정지
        self.btn_Stop.clicked.connect(self.stopMacroAction)
        self.btn_Stop.setEnabled(False)

        # 종료 버튼 - btn_Exit
        self.btn_Exit.clicked.connect(self.exitProgram)
        self.btn_Exit.clicked.connect(QCoreApplication.instance().quit)

    # Function
    # ==========================================================================
    # selectedUserDate
    def calendarClicked(self):
        week = self.cal_UsedDate.selectedDate().dayOfWeek()
        # self.setLog(str(week)) 6, 7이 주말

        self.usedDate = self.cal_UsedDate.selectedDate().toString('yyyyMMdd')
        self.setLog("선택 한 날짜 : " + self.usedDate)

        self.lbl_SelectedDate.setText('이용 날짜 : ' + self.cal_UsedDate.selectedDate().toString('yyyy-MM-dd'))

        setReservationTime(self, self.usedDate, week, self.holidays)

    # exitProgram
    def exitProgram(self):
        Worker2(self).start()

    # 로그인 페이지 열기
    def openPageAction(self):
        self.setLog("로그인 페이지 Open")
        self.wk.start()

    # 캐시 삭제
    def clearCacheAction(self):
        try:
            shutil.rmtree(r"c:\chrometemp")  # 쿠키 / 캐쉬파일 삭제
            QMessageBox.question(self, 'Info', '크롬 캐시 삭제 완료!', QMessageBox.Ok)
            self.setLog("크롬 캐시 삭제 완료!")
        except Exception as e:
            if e.__class__.__name__ == 'FileNotFoundError':
                self.setLog("삭제 할 캐시가 없습니다.")
                QMessageBox.question(self, 'Warning', '삭제 할 캐시가 없습니다.', QMessageBox.Ok)
            else:
                self.setLog("열려 있는 크롬을 닫고 실행 하세요.")
                QMessageBox.question(self, 'Warning', '열려 있는 크롬을 닫고 실행 하세요.', QMessageBox.Ok)

            pass

    # 매크로 시작
    @pyqtSlot()
    def startMacroAction(self):
        # 대표자
        teamName = self.le_Team.text()
        # 참가 인원
        userCount = self.cb_UsersCount.currentText()
        # 이용 목적
        purpose = self.le_Purpose.text()
        # 이용 날짜
        # self.usedDate
        # 시작 코트
        startCourt = self.cb_StartCourt.currentText()
        # 종료 코트
        endCourt = self.cb_EndCourt.currentText()
        # 시작 시간
        startTime = self.cb_StartTime.currentText()
        # 종료 시간
        endTime = self.cb_EndTime.currentText()

        valRes = True # validation(self, teamName=teamName, userCount=userCount, purpose=purpose, usedDate=self.usedDate, startCourt=startCourt, endCourt=endCourt, startTime=startTime, endTime=endTime)

        if valRes:
            # if self.rm is None:
            #     QMessageBox.question(self, 'Warning', '로그인 페이지를 먼저 열어주세요.', QMessageBox.Ok)
            #     self.setLog('로그인 페이지를 먼저 열어주세요.')
            # else:
            self.btn_Start.setEnabled(False)
            self.btn_Stop.setEnabled(True)

            self.btn_OpenPage.setEnabled(False)
            self.btn_ClearCache.setEnabled(False)

            self.le_Team.setEnabled(False)
            self.le_Purpose.setEnabled(False)

            self.cb_UsersCount.setEnabled(False)
            self.cb_StartCourt.setEnabled(False)
            self.cb_EndCourt.setEnabled(False)
            self.cb_StartTime.setEnabled(False)
            self.cb_EndTime.setEnabled(False)

            self.cal_UsedDate.setEnabled(False)
            StartMacro(self).start()

    # 매크로 중단
    @pyqtSlot()
    def stopMacroAction(self):
        self.btn_Stop.setEnabled(False)
        self.btn_Start.setEnabled(True)

        self.btn_OpenPage.setEnabled(True)
        self.btn_ClearCache.setEnabled(True)

        self.le_Team.setEnabled(True)
        self.le_Purpose.setEnabled(True)

        self.cb_UsersCount.setEnabled(True)
        self.cb_StartCourt.setEnabled(True)
        self.cb_EndCourt.setEnabled(True)
        self.cb_StartTime.setEnabled(True)
        self.cb_EndTime.setEnabled(True)

        self.cal_UsedDate.setEnabled(True)
        StopMacro(self).start()

    # timeOut
    def timeout(self):
        sender = self.sender()
        currentTime = QTime.currentTime().toString("hh:mm:ss")
        if id(sender) == id(self.timer):
            self.ln_CurrentTime.display(currentTime)

    # 종료 코트 CB
    def changeEndCourtComboBoxAction(self):
        startCourtNum = int(self.cb_StartCourt.currentText())

        setCourt(self, startCourtNum)

    # 종료 시간 CB
    def changeEndTimeComboBoxAction(self):
        week = self.cal_UsedDate.selectedDate().dayOfWeek()
        # self.setLog(str(week)) 6, 7이 주말

        setReservationEndTime(self.cb_EndTime, self.cb_StartTime.currentIndex(), self.usedDate, week, self.holidays)

    # set Log
    @pyqtSlot()
    def setLog(self, msg):
        currentTime = QTime.currentTime().toString()
        self.tb_Log.append(currentTime + ' : ' + msg)
    # ==========================================================================


if __name__ == "__main__":
    app = QApplication(sys.argv)
    myWindow = WindowClass()
    myWindow.show()
    app.exec_()





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import subprocess

from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import UnexpectedAlertPresentException, NoSuchElementException, JavascriptException, WebDriverException
from selenium.webdriver.chrome.service import Service
import threading
import urllib3
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import time
import pyzbar.pyzbar as pyzbar
import ssl
from selenium.webdriver.common.alert import Alert
import requests
from bs4 import BeautifulSoup
from selenium.webdriver.common.keys import Keys
import json
import csv

def Worker1234RPska(self):
    _driver = self.chromeDriver

    rsv_svc_id_infos = {
        "A": "S230712162001737275",
        "B": "S230712153927174132",
        "C": "S230712150641951178"
    }

    baseUrl1 = "https://yeyak.seoul.go.kr/web/reservation/selectReservView.do?rsv_svc_id="
    baseUrl2 = "&code=T100&dCode=T108&sch_order=1&sch_choose_list=&sch_type=&sch_text=%EA%B3%84%EB%82%A8&sch_recpt_begin_dt=&sch_recpt_end_dt=&sch_use_begin_dt=&sch_use_end_dt=&svc_prior=N&sch_reqst_value="

    courtUrls = [baseUrl1 + rsv_svc_id_infos["A"] + baseUrl2, baseUrl1 + rsv_svc_id_infos["B"] + baseUrl2, baseUrl1 +
                 rsv_svc_id_infos["C"] + baseUrl2]

    iCheckDays1 = [1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 28, 29, 31]
    iCheckDays2 = [2, 9, 15, 16, 23]

    prefix = 'cal_202308'
    sCheckDays1 = []
    sCheckDays2 = []
    for i in iCheckDays1:
        if i < 10:
            sCheckDays1.append(prefix + str(i))
        else:
            sCheckDays1.append(prefix + str(i))

    for i in iCheckDays2:
        if i < 10:
            sCheckDays2.append(prefix + str(i))
        else:
            sCheckDays2.append(prefix + str(i))

    for p in range(10000000000):
        for i in range(len(courtUrls)):
            print(courtUrls[i])
            _driver.get(courtUrls[i])

            WebDriverWait(_driver, 10).until(
                EC.presence_of_element_located((By.CLASS_NAME, "pop_x"))
            )

            _driver.find_elements_by_class_name('pop_x')[0].click()

            WebDriverWait(_driver, 10).until(EC.element_to_be_clickable((By.ID, 'calendar')))

            checkDayArr = []
            # A, B Court
            if i == 0 or i == 1:
                checkDayArr = sCheckDays1
            # C Court
            else:
                checkDayArr = sCheckDays2

            for checkDay in checkDayArr:
                try:
                    aTagElement = _driver.find_element_by_id(checkDay)
                    if aTagElement.get_attribute("title") == '예약가능':
                        aTagElement.send_keys(Keys.ENTER)

                        try:
                            script = ("document.getElementsByClassName('common_btn blue')[0].click();")
                            _driver.execute_script(script)

                            WebDriverWait(_driver, 10).until(
                                EC.presence_of_element_located((By.ID, "useUnit"))
                            )

                            ul_TimeElement = _driver.find_element_by_id('useUnit')

                            li_TimeElements = ul_TimeElement.find_elements_by_tag_name('li')

                            script = ("document.getElementsByClassName('con_box')[0].scrollBy(0, 240);")

                            _driver.execute_script(script)

                            timeDatas = []
                            for li_TimeElement in li_TimeElements:
                                if li_TimeElement.text.find('20:00~') > -1 or li_TimeElement.text.find('22:00~') > -1:
                                    if li_TimeElement.get_attribute('class') == 'tab-all':
                                        timeDatas.append(li_TimeElement)

                            if len(timeDatas) >= 2:
                                for timeData in timeDatas:
                                    timeData.click()

                            script = ("document.getElementsByClassName('user_plus')[0].onclick();"
                                      "document.getElementById('chk_agree1').click();"
                                      "document.getElementById('chk_agree2').click();")

                            _driver.execute_script(script)

                            btn_inps = _driver.find_elements_by_class_name('btn_inp')

                            for btn_inp in btn_inps:
                                if btn_inp.text == '인증번호발송':
                                    btn_verification = btn_inp
                                elif btn_inp.text == '확인':
                                    btn_Ok = btn_inp

                            btn_verification.click()

                            _driver.switch_to.window(_driver.current_window_handle)

                            WebDriverWait(_driver, 10).until(EC.alert_is_present())
                            alert = Alert(_driver)
                            alert.accept()

                            script = ("document.getElementById('form_cert').focus();")
                            _driver.execute_script(script)

                            wait = WebDriverWait(_driver, 10)
                            textbox = wait.until(EC.element_to_be_clickable((By.ID, 'form_cert')))

                            # 텍스트 상자에 길이가 5이고 숫자인 값이 입력 될 때까지 대기합니다.
                            wait.until(
                                lambda driver: len(textbox.get_attribute('value').strip()) == 5 and textbox.get_attribute(
                                    'value').strip().isdigit())

                            btn_Ok.click()

                            time.sleep(0.5)

                            btnTag = _driver.find_elements_by_class_name("common_btn blue")

                            if len(btnTag) > 0:
                                btnTag.click()
                            else:
                                ul_element = _driver.find_element_by_class_name(
                                    "book_btn_box")  # class name이 "book_btn_box"인 ul 요소 가져오기
                                active_li_element = ul_element.find_element_by_css_selector(
                                    "li.active")  # 하위 li 요소 중 class가 "active"인 li 요소 가져오기

                                active_li_element.click()

                            # Alert의 메시지 가져오기
                            WebDriverWait(_driver, 10).until(EC.alert_is_present())
                            alert = Alert(_driver)
                            alert.accept()
                        except Exception as e:
                            print(e)
                            pass
                except:
                    pass

def set_chrome_driver():
    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument('headless')
    chrome_options.add_argument("disable-gpu")
    chrome_options.add_argument("disable-infobars")
    chrome_options.add_argument("--disable-extensions")

    chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9223")

    try:
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
    except Exception as e:
        print(e)
        driver = webdriver.Chrome(options=chrome_options)

    return driver

class RunMacro:
    def __init__(self, parent):
        subprocess.Popen(
            r'C:\Program Files\Google\Chrome\Application\chrome.exe --remote-debugging-port=9223 --user-data-dir="C:\chrometemp2"')  # 디버거 크롬 구동

        self.chromeDriver = set_chrome_driver()
        self.parent = parent
        self.isStart = False
        self.macroInfoList = None

    def moveToLoginPage(self):
        loginPagePath = 'https://yeyak.seoul.go.kr/web/main.do'
        self.chromeDriver.get(loginPagePath)

    def startMacro(self):
        # self.parent.setLog("예약 시작")
        self.isStart = True
        # isWeek = self.parent.isWeek
        #
        # if isWeek:
        #     with open('macroDatasWeekEnd.csv', "r", encoding='utf-8-sig') as f:
        #         reader = csv.reader(f)
        #         macroInfoList = list(reader)
        #         self.macroInfoList = macroInfoList
        # else:
        #     with open('macroDatasWeekDay.csv', "r", encoding='utf-8-sig') as f:
        #         reader = csv.reader(f)
        #         macroInfoList = list(reader)
        #         self.macroInfoList = macroInfoList
        #
        # try:
        #     urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        #     t1 = threading.Thread(target=Worker12345, args=(self, 1))
        #     t1.daemon = True
        #     t1.start()
        # except Exception as e:
        #     pass

        # 대표자
        teamName = self.parent.le_Team.text()
        # 참가 인원
        userCount = self.parent.cb_UsersCount.currentText()
        # 이용 목적
        purpose = self.parent.le_Purpose.text()
        # 이용 날짜
        usedDate = self.parent.usedDate
        # 시작 코트
        startCourt = self.parent.cb_StartCourt.currentText()
        # 종료 코트
        endCourt = self.parent.cb_EndCourt.currentText()
        # 시작 시간
        startTime = int(self.parent.cb_StartTime.currentText().split(':')[0])
        # 종료 시간
        endTime = int(self.parent.cb_EndTime.currentText().split(':')[0])

        try:
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
            t1 = threading.Thread(target=Worker1234RPska, args=(self,))

            t1.daemon = True
            t1.start()
        except Exception as e:
            pass

    def stopMacro(self):
        self.parent.setLog("매크로 중지!")
        self.isStart = False

    def quitDriver(self):
        try:
            _driver = self.chromeDriver
            _driver.stop_client()
            _driver.quit()
        except Exception as e:
            print(e)
            pass

    def stopMacro(self):
        self.parent.setLog("매크로 중지!")
        self.isStart = False
